/*
 * generated by Xtext 2.19.0
 */
grammar InternalGoLDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.simonbaars.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.simonbaars.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.simonbaars.services.GoLDSLGrammarAccess;

}
@parser::members {
	private GoLDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(GoLDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDSL
entryRuleDSL
:
{ before(grammarAccess.getDSLRule()); }
	 ruleDSL
{ after(grammarAccess.getDSLRule()); } 
	 EOF 
;

// Rule DSL
ruleDSL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDSLAccess().getGroup()); }
		(rule__DSL__Group__0)
		{ after(grammarAccess.getDSLAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoard
entryRuleBoard
:
{ before(grammarAccess.getBoardRule()); }
	 ruleBoard
{ after(grammarAccess.getBoardRule()); } 
	 EOF 
;

// Rule Board
ruleBoard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoardAccess().getGroup()); }
		(rule__Board__Group__0)
		{ after(grammarAccess.getBoardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjects
entryRuleObjects
:
{ before(grammarAccess.getObjectsRule()); }
	 ruleObjects
{ after(grammarAccess.getObjectsRule()); } 
	 EOF 
;

// Rule Objects
ruleObjects 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getObjectsAccess().getAlternatives()); }
			(rule__Objects__Alternatives)
			{ after(grammarAccess.getObjectsAccess().getAlternatives()); }
		)
		(
			{ before(grammarAccess.getObjectsAccess().getAlternatives()); }
			(rule__Objects__Alternatives)*
			{ after(grammarAccess.getObjectsAccess().getAlternatives()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeDef
entryRuleShapeDef
:
{ before(grammarAccess.getShapeDefRule()); }
	 ruleShapeDef
{ after(grammarAccess.getShapeDefRule()); } 
	 EOF 
;

// Rule ShapeDef
ruleShapeDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeDefAccess().getGroup()); }
		(rule__ShapeDef__Group__0)
		{ after(grammarAccess.getShapeDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCellPairs
entryRuleCellPairs
:
{ before(grammarAccess.getCellPairsRule()); }
	 ruleCellPairs
{ after(grammarAccess.getCellPairsRule()); } 
	 EOF 
;

// Rule CellPairs
ruleCellPairs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getCellPairsAccess().getGroup()); }
			(rule__CellPairs__Group__0)
			{ after(grammarAccess.getCellPairsAccess().getGroup()); }
		)
		(
			{ before(grammarAccess.getCellPairsAccess().getGroup()); }
			(rule__CellPairs__Group__0)*
			{ after(grammarAccess.getCellPairsAccess().getGroup()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCellsDef
entryRuleCellsDef
:
{ before(grammarAccess.getCellsDefRule()); }
	 ruleCellsDef
{ after(grammarAccess.getCellsDefRule()); } 
	 EOF 
;

// Rule CellsDef
ruleCellsDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellsDefAccess().getGroup()); }
		(rule__CellsDef__Group__0)
		{ after(grammarAccess.getCellsDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCellDef
entryRuleCellDef
:
{ before(grammarAccess.getCellDefRule()); }
	 ruleCellDef
{ after(grammarAccess.getCellDefRule()); } 
	 EOF 
;

// Rule CellDef
ruleCellDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellDefAccess().getGroup()); }
		(rule__CellDef__Group__0)
		{ after(grammarAccess.getCellDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShapeRef
entryRuleShapeRef
:
{ before(grammarAccess.getShapeRefRule()); }
	 ruleShapeRef
{ after(grammarAccess.getShapeRefRule()); } 
	 EOF 
;

// Rule ShapeRef
ruleShapeRef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeRefAccess().getGroup()); }
		(rule__ShapeRef__Group__0)
		{ after(grammarAccess.getShapeRefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCell
entryRuleCell
:
{ before(grammarAccess.getCellRule()); }
	 ruleCell
{ after(grammarAccess.getCellRule()); } 
	 EOF 
;

// Rule Cell
ruleCell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCellAccess().getGroup()); }
		(rule__Cell__Group__0)
		{ after(grammarAccess.getCellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionRule
entryRuleConditionRule
:
{ before(grammarAccess.getConditionRuleRule()); }
	 ruleConditionRule
{ after(grammarAccess.getConditionRuleRule()); } 
	 EOF 
;

// Rule ConditionRule
ruleConditionRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionRuleAccess().getAlternatives()); }
		(rule__ConditionRule__Alternatives)
		{ after(grammarAccess.getConditionRuleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionRules
entryRuleConditionRules
:
{ before(grammarAccess.getConditionRulesRule()); }
	 ruleConditionRules
{ after(grammarAccess.getConditionRulesRule()); } 
	 EOF 
;

// Rule ConditionRules
ruleConditionRules 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionRulesAccess().getGroup()); }
		(rule__ConditionRules__Group__0)
		{ after(grammarAccess.getConditionRulesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLives
entryRuleLives
:
{ before(grammarAccess.getLivesRule()); }
	 ruleLives
{ after(grammarAccess.getLivesRule()); } 
	 EOF 
;

// Rule Lives
ruleLives 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLivesAccess().getGroup()); }
		(rule__Lives__Group__0)
		{ after(grammarAccess.getLivesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRange
entryRuleRange
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeAccess().getAlternatives()); }
		(rule__Range__Alternatives)
		{ after(grammarAccess.getRangeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoundedRange
entryRuleBoundedRange
:
{ before(grammarAccess.getBoundedRangeRule()); }
	 ruleBoundedRange
{ after(grammarAccess.getBoundedRangeRule()); } 
	 EOF 
;

// Rule BoundedRange
ruleBoundedRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoundedRangeAccess().getGroup()); }
		(rule__BoundedRange__Group__0)
		{ after(grammarAccess.getBoundedRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnboundedRange
entryRuleUnboundedRange
:
{ before(grammarAccess.getUnboundedRangeRule()); }
	 ruleUnboundedRange
{ after(grammarAccess.getUnboundedRangeRule()); } 
	 EOF 
;

// Rule UnboundedRange
ruleUnboundedRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnboundedRangeAccess().getAlternatives()); }
		(rule__UnboundedRange__Alternatives)
		{ after(grammarAccess.getUnboundedRangeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeftUnboundedRange
entryRuleLeftUnboundedRange
:
{ before(grammarAccess.getLeftUnboundedRangeRule()); }
	 ruleLeftUnboundedRange
{ after(grammarAccess.getLeftUnboundedRangeRule()); } 
	 EOF 
;

// Rule LeftUnboundedRange
ruleLeftUnboundedRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftUnboundedRangeAccess().getGroup()); }
		(rule__LeftUnboundedRange__Group__0)
		{ after(grammarAccess.getLeftUnboundedRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRightUnboundedRange
entryRuleRightUnboundedRange
:
{ before(grammarAccess.getRightUnboundedRangeRule()); }
	 ruleRightUnboundedRange
{ after(grammarAccess.getRightUnboundedRangeRule()); } 
	 EOF 
;

// Rule RightUnboundedRange
ruleRightUnboundedRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightUnboundedRangeAccess().getGroup()); }
		(rule__RightUnboundedRange__Group__0)
		{ after(grammarAccess.getRightUnboundedRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGrid
entryRuleGrid
:
{ before(grammarAccess.getGridRule()); }
	 ruleGrid
{ after(grammarAccess.getGridRule()); } 
	 EOF 
;

// Rule Grid
ruleGrid 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGridAccess().getGroup()); }
		(rule__Grid__Group__0)
		{ after(grammarAccess.getGridAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGridOffset
entryRuleGridOffset
:
{ before(grammarAccess.getGridOffsetRule()); }
	 ruleGridOffset
{ after(grammarAccess.getGridOffsetRule()); } 
	 EOF 
;

// Rule GridOffset
ruleGridOffset 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGridOffsetAccess().getGroup()); }
		(rule__GridOffset__Group__0)
		{ after(grammarAccess.getGridOffsetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSize
entryRuleSize
:
{ before(grammarAccess.getSizeRule()); }
	 ruleSize
{ after(grammarAccess.getSizeRule()); } 
	 EOF 
;

// Rule Size
ruleSize 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSizeAccess().getGroup()); }
		(rule__Size__Group__0)
		{ after(grammarAccess.getSizeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BoolOperator
ruleBoolOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOperatorAccess().getAlternatives()); }
		(rule__BoolOperator__Alternatives)
		{ after(grammarAccess.getBoolOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule GridPart
ruleGridPart
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridPartAccess().getAlternatives()); }
		(rule__GridPart__Alternatives)
		{ after(grammarAccess.getGridPartAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDSLAccess().getRulesAssignment_1_0()); }
		(rule__DSL__RulesAssignment_1_0)
		{ after(grammarAccess.getDSLAccess().getRulesAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getDSLAccess().getShapesAssignment_1_1()); }
		(rule__DSL__ShapesAssignment_1_1)
		{ after(grammarAccess.getDSLAccess().getShapesAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Objects__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectsAccess().getShapesAssignment_0()); }
		(rule__Objects__ShapesAssignment_0)
		{ after(grammarAccess.getObjectsAccess().getShapesAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectsAccess().getMoreCellAssignment_1()); }
		(rule__Objects__MoreCellAssignment_1)
		{ after(grammarAccess.getObjectsAccess().getMoreCellAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getObjectsAccess().getMoreCellsAssignment_2()); }
		(rule__Objects__MoreCellsAssignment_2)
		{ after(grammarAccess.getObjectsAccess().getMoreCellsAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getObjectsAccess().getGridsAssignment_3()); }
		(rule__Objects__GridsAssignment_3)
		{ after(grammarAccess.getObjectsAccess().getGridsAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRule__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionRuleAccess().getNumberAssignment_0()); }
		(rule__ConditionRule__NumberAssignment_0)
		{ after(grammarAccess.getConditionRuleAccess().getNumberAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionRuleAccess().getRangeAssignment_1()); }
		(rule__ConditionRule__RangeAssignment_1)
		{ after(grammarAccess.getConditionRuleAccess().getRangeAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionRuleAccess().getLivesAssignment_2()); }
		(rule__ConditionRule__LivesAssignment_2)
		{ after(grammarAccess.getConditionRuleAccess().getLivesAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeAccess().getBoundedRangeParserRuleCall_0()); }
		ruleBoundedRange
		{ after(grammarAccess.getRangeAccess().getBoundedRangeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRangeAccess().getUnboundedRangeParserRuleCall_1()); }
		ruleUnboundedRange
		{ after(grammarAccess.getRangeAccess().getUnboundedRangeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnboundedRange__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnboundedRangeAccess().getLeftUnboundedRangeParserRuleCall_0()); }
		ruleLeftUnboundedRange
		{ after(grammarAccess.getUnboundedRangeAccess().getLeftUnboundedRangeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnboundedRangeAccess().getRightUnboundedRangeParserRuleCall_1()); }
		ruleRightUnboundedRange
		{ after(grammarAccess.getUnboundedRangeAccess().getRightUnboundedRangeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolOperatorAccess().getANDEnumLiteralDeclaration_0()); }
		('&')
		{ after(grammarAccess.getBoolOperatorAccess().getANDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolOperatorAccess().getOREnumLiteralDeclaration_1()); }
		('|')
		{ after(grammarAccess.getBoolOperatorAccess().getOREnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GridPart__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridPartAccess().getANDEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getGridPartAccess().getANDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getGridPartAccess().getOREnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getGridPartAccess().getOREnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__0__Impl
	rule__DSL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getBoardAssignment_0()); }
	(rule__DSL__BoardAssignment_0)
	{ after(grammarAccess.getDSLAccess().getBoardAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DSL__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDSLAccess().getAlternatives_1()); }
	(rule__DSL__Alternatives_1)*
	{ after(grammarAccess.getDSLAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Board__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Board__Group__0__Impl
	rule__Board__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardAccess().getBoardKeyword_0()); }
	'Board:'
	{ after(grammarAccess.getBoardAccess().getBoardKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Board__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoardAccess().getObjectsAssignment_1()); }
	(rule__Board__ObjectsAssignment_1)
	{ after(grammarAccess.getBoardAccess().getObjectsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeDef__Group__0__Impl
	rule__ShapeDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeDefAccess().getShapeKeyword_0()); }
	'Shape'
	{ after(grammarAccess.getShapeDefAccess().getShapeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeDef__Group__1__Impl
	rule__ShapeDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeDefAccess().getNameAssignment_1()); }
	(rule__ShapeDef__NameAssignment_1)
	{ after(grammarAccess.getShapeDefAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeDef__Group__2__Impl
	rule__ShapeDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeDefAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getShapeDefAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeDef__Group__3__Impl
	rule__ShapeDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeDefAccess().getOffsetAssignment_3()); }
	(rule__ShapeDef__OffsetAssignment_3)?
	{ after(grammarAccess.getShapeDefAccess().getOffsetAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeDef__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeDefAccess().getObjectsAssignment_4()); }
	(rule__ShapeDef__ObjectsAssignment_4)
	{ after(grammarAccess.getShapeDefAccess().getObjectsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CellPairs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellPairs__Group__0__Impl
	rule__CellPairs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPairs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellPairsAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getCellPairsAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPairs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellPairs__Group__1__Impl
	rule__CellPairs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPairs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellPairsAccess().getCellsAssignment_1()); }
	(rule__CellPairs__CellsAssignment_1)
	{ after(grammarAccess.getCellPairsAccess().getCellsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPairs__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellPairs__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPairs__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellPairsAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getCellPairsAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CellsDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellsDef__Group__0__Impl
	rule__CellsDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CellsDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellsDefAccess().getCellsKeyword_0()); }
	'Cells:'
	{ after(grammarAccess.getCellsDefAccess().getCellsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellsDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellsDef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CellsDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellsDefAccess().getCellPairsParserRuleCall_1()); }
	ruleCellPairs
	{ after(grammarAccess.getCellsDefAccess().getCellPairsParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CellDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellDef__Group__0__Impl
	rule__CellDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CellDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellDefAccess().getCellKeyword_0()); }
	'Cell:'
	{ after(grammarAccess.getCellDefAccess().getCellKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CellDef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CellDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellDefAccess().getCellParserRuleCall_1()); }
	ruleCell
	{ after(grammarAccess.getCellDefAccess().getCellParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeRef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeRef__Group__0__Impl
	rule__ShapeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeRefAccess().getShapeKeyword_0()); }
	'Shape'
	{ after(grammarAccess.getShapeRefAccess().getShapeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeRef__Group__1__Impl
	rule__ShapeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeRefAccess().getNameAssignment_1()); }
	(rule__ShapeRef__NameAssignment_1)
	{ after(grammarAccess.getShapeRefAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeRef__Group__2__Impl
	rule__ShapeRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeRefAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getShapeRefAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeRef__Group__3__Impl
	rule__ShapeRef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeRefAccess().getXAssignment_3()); }
	(rule__ShapeRef__XAssignment_3)
	{ after(grammarAccess.getShapeRefAccess().getXAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeRef__Group__4__Impl
	rule__ShapeRef__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeRefAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getShapeRefAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShapeRef__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShapeRefAccess().getYAssignment_5()); }
	(rule__ShapeRef__YAssignment_5)
	{ after(grammarAccess.getShapeRefAccess().getYAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell__Group__0__Impl
	rule__Cell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellAccess().getXAssignment_0()); }
	(rule__Cell__XAssignment_0)
	{ after(grammarAccess.getCellAccess().getXAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell__Group__1__Impl
	rule__Cell__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellAccess().getCommaKeyword_1()); }
	','
	{ after(grammarAccess.getCellAccess().getCommaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cell__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCellAccess().getYAssignment_2()); }
	(rule__Cell__YAssignment_2)
	{ after(grammarAccess.getCellAccess().getYAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
	'Rule:'
	{ after(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionAssignment_1()); }
	(rule__Rule__ConditionAssignment_1)
	{ after(grammarAccess.getRuleAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getActionAssignment_2()); }
	(rule__Rule__ActionAssignment_2)
	{ after(grammarAccess.getRuleAccess().getActionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getCreateKeyword_0()); }
	'Create'
	{ after(grammarAccess.getActionAccess().getCreateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getObjectsAssignment_1()); }
	(rule__Action__ObjectsAssignment_1)
	{ after(grammarAccess.getActionAccess().getObjectsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getIfKeyword_0()); }
	'If'
	{ after(grammarAccess.getConditionAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionsAssignment_1()); }
	(rule__Condition__ConditionsAssignment_1)
	{ after(grammarAccess.getConditionAccess().getConditionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionRules__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionRules__Group__0__Impl
	rule__ConditionRules__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRules__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionRulesAccess().getRule1Assignment_0()); }
	(rule__ConditionRules__Rule1Assignment_0)
	{ after(grammarAccess.getConditionRulesAccess().getRule1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRules__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionRules__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRules__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionRulesAccess().getGroup_1()); }
	(rule__ConditionRules__Group_1__0)?
	{ after(grammarAccess.getConditionRulesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionRules__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionRules__Group_1__0__Impl
	rule__ConditionRules__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRules__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionRulesAccess().getOperatorAssignment_1_0()); }
	(rule__ConditionRules__OperatorAssignment_1_0)
	{ after(grammarAccess.getConditionRulesAccess().getOperatorAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRules__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionRules__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRules__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionRulesAccess().getRules2Assignment_1_1()); }
	(rule__ConditionRules__Rules2Assignment_1_1)
	{ after(grammarAccess.getConditionRulesAccess().getRules2Assignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lives__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lives__Group__0__Impl
	rule__Lives__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lives__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLivesAccess().getLivesKeyword_0()); }
	'Lives'
	{ after(grammarAccess.getLivesAccess().getLivesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lives__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lives__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lives__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLivesAccess().getCellAssignment_1()); }
	(rule__Lives__CellAssignment_1)
	{ after(grammarAccess.getLivesAccess().getCellAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoundedRange__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoundedRange__Group__0__Impl
	rule__BoundedRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedRange__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoundedRangeAccess().getLowerBoundAssignment_0()); }
	(rule__BoundedRange__LowerBoundAssignment_0)
	{ after(grammarAccess.getBoundedRangeAccess().getLowerBoundAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedRange__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoundedRange__Group__1__Impl
	rule__BoundedRange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedRange__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoundedRangeAccess().getFullStopFullStopKeyword_1()); }
	'..'
	{ after(grammarAccess.getBoundedRangeAccess().getFullStopFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedRange__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoundedRange__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedRange__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoundedRangeAccess().getHigherBoundAssignment_2()); }
	(rule__BoundedRange__HigherBoundAssignment_2)
	{ after(grammarAccess.getBoundedRangeAccess().getHigherBoundAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeftUnboundedRange__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftUnboundedRange__Group__0__Impl
	rule__LeftUnboundedRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftUnboundedRange__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftUnboundedRangeAccess().getLessThanSignKeyword_0()); }
	'<'
	{ after(grammarAccess.getLeftUnboundedRangeAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftUnboundedRange__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftUnboundedRange__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftUnboundedRange__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftUnboundedRangeAccess().getLowerBoundAssignment_1()); }
	(rule__LeftUnboundedRange__LowerBoundAssignment_1)
	{ after(grammarAccess.getLeftUnboundedRangeAccess().getLowerBoundAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RightUnboundedRange__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightUnboundedRange__Group__0__Impl
	rule__RightUnboundedRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RightUnboundedRange__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightUnboundedRangeAccess().getGreaterThanSignKeyword_0()); }
	'>'
	{ after(grammarAccess.getRightUnboundedRangeAccess().getGreaterThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightUnboundedRange__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightUnboundedRange__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RightUnboundedRange__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightUnboundedRangeAccess().getHigherBoundAssignment_1()); }
	(rule__RightUnboundedRange__HigherBoundAssignment_1)
	{ after(grammarAccess.getRightUnboundedRangeAccess().getHigherBoundAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Grid__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__0__Impl
	rule__Grid__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getGridKeyword_0()); }
	'Grid:'
	{ after(grammarAccess.getGridAccess().getGridKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__1__Impl
	rule__Grid__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridAccess().getSizeAssignment_1()); }
	(rule__Grid__SizeAssignment_1)?
	{ after(grammarAccess.getGridAccess().getSizeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Grid__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getGridAccess().getPartsAssignment_2()); }
		(rule__Grid__PartsAssignment_2)
		{ after(grammarAccess.getGridAccess().getPartsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getGridAccess().getPartsAssignment_2()); }
		(rule__Grid__PartsAssignment_2)*
		{ after(grammarAccess.getGridAccess().getPartsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GridOffset__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GridOffset__Group__0__Impl
	rule__GridOffset__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GridOffset__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridOffsetAccess().getOffsetKeyword_0()); }
	'offset'
	{ after(grammarAccess.getGridOffsetAccess().getOffsetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GridOffset__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GridOffset__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GridOffset__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGridOffsetAccess().getOffsetAssignment_1()); }
	(rule__GridOffset__OffsetAssignment_1)
	{ after(grammarAccess.getGridOffsetAccess().getOffsetAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Size__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__0__Impl
	rule__Size__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
	'size'
	{ after(grammarAccess.getSizeAccess().getSizeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__1__Impl
	rule__Size__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getWidthAssignment_1()); }
	(rule__Size__WidthAssignment_1)
	{ after(grammarAccess.getSizeAccess().getWidthAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Size__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSizeAccess().getHeightAssignment_2()); }
	(rule__Size__HeightAssignment_2)
	{ after(grammarAccess.getSizeAccess().getHeightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DSL__BoardAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDSLAccess().getBoardBoardParserRuleCall_0_0()); }
		ruleBoard
		{ after(grammarAccess.getDSLAccess().getBoardBoardParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__RulesAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDSLAccess().getRulesRuleParserRuleCall_1_0_0()); }
		ruleRule
		{ after(grammarAccess.getDSLAccess().getRulesRuleParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DSL__ShapesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDSLAccess().getShapesShapeDefParserRuleCall_1_1_0()); }
		ruleShapeDef
		{ after(grammarAccess.getDSLAccess().getShapesShapeDefParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Board__ObjectsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoardAccess().getObjectsObjectsParserRuleCall_1_0()); }
		ruleObjects
		{ after(grammarAccess.getBoardAccess().getObjectsObjectsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Objects__ShapesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectsAccess().getShapesShapeRefParserRuleCall_0_0()); }
		ruleShapeRef
		{ after(grammarAccess.getObjectsAccess().getShapesShapeRefParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Objects__MoreCellAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectsAccess().getMoreCellCellDefParserRuleCall_1_0()); }
		ruleCellDef
		{ after(grammarAccess.getObjectsAccess().getMoreCellCellDefParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Objects__MoreCellsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectsAccess().getMoreCellsCellsDefParserRuleCall_2_0()); }
		ruleCellsDef
		{ after(grammarAccess.getObjectsAccess().getMoreCellsCellsDefParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Objects__GridsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectsAccess().getGridsGridParserRuleCall_3_0()); }
		ruleGrid
		{ after(grammarAccess.getObjectsAccess().getGridsGridParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeDefAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getShapeDefAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__OffsetAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeDefAccess().getOffsetGridOffsetParserRuleCall_3_0()); }
		ruleGridOffset
		{ after(grammarAccess.getShapeDefAccess().getOffsetGridOffsetParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeDef__ObjectsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeDefAccess().getObjectsObjectsParserRuleCall_4_0()); }
		ruleObjects
		{ after(grammarAccess.getShapeDefAccess().getObjectsObjectsParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CellPairs__CellsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellPairsAccess().getCellsCellParserRuleCall_1_0()); }
		ruleCell
		{ after(grammarAccess.getCellPairsAccess().getCellsCellParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeRefAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getShapeRefAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__XAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeRefAccess().getXINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getShapeRefAccess().getXINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__YAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeRefAccess().getYINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getShapeRefAccess().getYINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__XAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellAccess().getXINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getCellAccess().getXINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cell__YAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCellAccess().getYINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getCellAccess().getYINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ActionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getActionActionParserRuleCall_2_0()); }
		ruleAction
		{ after(grammarAccess.getRuleAccess().getActionActionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ObjectsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getObjectsObjectsParserRuleCall_1_0()); }
		ruleObjects
		{ after(grammarAccess.getActionAccess().getObjectsObjectsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getConditionsConditionRulesParserRuleCall_1_0()); }
		ruleConditionRules
		{ after(grammarAccess.getConditionAccess().getConditionsConditionRulesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRule__NumberAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionRuleAccess().getNumberINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getConditionRuleAccess().getNumberINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRule__RangeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionRuleAccess().getRangeRangeParserRuleCall_1_0()); }
		ruleRange
		{ after(grammarAccess.getConditionRuleAccess().getRangeRangeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRule__LivesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionRuleAccess().getLivesLivesParserRuleCall_2_0()); }
		ruleLives
		{ after(grammarAccess.getConditionRuleAccess().getLivesLivesParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRules__Rule1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionRulesAccess().getRule1ConditionRuleParserRuleCall_0_0()); }
		ruleConditionRule
		{ after(grammarAccess.getConditionRulesAccess().getRule1ConditionRuleParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRules__OperatorAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionRulesAccess().getOperatorBoolOperatorEnumRuleCall_1_0_0()); }
		ruleBoolOperator
		{ after(grammarAccess.getConditionRulesAccess().getOperatorBoolOperatorEnumRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRules__Rules2Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionRulesAccess().getRules2ConditionRulesParserRuleCall_1_1_0()); }
		ruleConditionRules
		{ after(grammarAccess.getConditionRulesAccess().getRules2ConditionRulesParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lives__CellAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLivesAccess().getCellCellPairsParserRuleCall_1_0()); }
		ruleCellPairs
		{ after(grammarAccess.getLivesAccess().getCellCellPairsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedRange__LowerBoundAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoundedRangeAccess().getLowerBoundINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getBoundedRangeAccess().getLowerBoundINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedRange__HigherBoundAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoundedRangeAccess().getHigherBoundINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getBoundedRangeAccess().getHigherBoundINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftUnboundedRange__LowerBoundAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftUnboundedRangeAccess().getLowerBoundINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getLeftUnboundedRangeAccess().getLowerBoundINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightUnboundedRange__HigherBoundAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightUnboundedRangeAccess().getHigherBoundINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getRightUnboundedRangeAccess().getHigherBoundINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__SizeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridAccess().getSizeSizeParserRuleCall_1_0()); }
		ruleSize
		{ after(grammarAccess.getGridAccess().getSizeSizeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Grid__PartsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridAccess().getPartsGridPartEnumRuleCall_2_0()); }
		ruleGridPart
		{ after(grammarAccess.getGridAccess().getPartsGridPartEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GridOffset__OffsetAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGridOffsetAccess().getOffsetINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getGridOffsetAccess().getOffsetINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__WidthAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeAccess().getWidthINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getSizeAccess().getWidthINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Size__HeightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSizeAccess().getHeightINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getSizeAccess().getHeightINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
