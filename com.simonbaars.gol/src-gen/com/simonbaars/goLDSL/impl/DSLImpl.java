/**
 * generated by Xtext 2.19.0
 */
package com.simonbaars.goLDSL.impl;

import com.simonbaars.goLDSL.Board;
import com.simonbaars.goLDSL.DSL;
import com.simonbaars.goLDSL.GoLDSLPackage;
import com.simonbaars.goLDSL.Rule;
import com.simonbaars.goLDSL.ShapeDef;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>DSL</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.simonbaars.goLDSL.impl.DSLImpl#getBoard <em>Board</em>}</li>
 *   <li>{@link com.simonbaars.goLDSL.impl.DSLImpl#getRules <em>Rules</em>}</li>
 *   <li>{@link com.simonbaars.goLDSL.impl.DSLImpl#getShapes <em>Shapes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DSLImpl extends MinimalEObjectImpl.Container implements DSL
{
  /**
   * The cached value of the '{@link #getBoard() <em>Board</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoard()
   * @generated
   * @ordered
   */
  protected Board board;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected EList<Rule> rules;

  /**
   * The cached value of the '{@link #getShapes() <em>Shapes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShapes()
   * @generated
   * @ordered
   */
  protected EList<ShapeDef> shapes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DSLImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoLDSLPackage.Literals.DSL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Board getBoard()
  {
    return board;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBoard(Board newBoard, NotificationChain msgs)
  {
    Board oldBoard = board;
    board = newBoard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoLDSLPackage.DSL__BOARD, oldBoard, newBoard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBoard(Board newBoard)
  {
    if (newBoard != board)
    {
      NotificationChain msgs = null;
      if (board != null)
        msgs = ((InternalEObject)board).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoLDSLPackage.DSL__BOARD, null, msgs);
      if (newBoard != null)
        msgs = ((InternalEObject)newBoard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoLDSLPackage.DSL__BOARD, null, msgs);
      msgs = basicSetBoard(newBoard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoLDSLPackage.DSL__BOARD, newBoard, newBoard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Rule> getRules()
  {
    if (rules == null)
    {
      rules = new EObjectContainmentEList<Rule>(Rule.class, this, GoLDSLPackage.DSL__RULES);
    }
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ShapeDef> getShapes()
  {
    if (shapes == null)
    {
      shapes = new EObjectContainmentEList<ShapeDef>(ShapeDef.class, this, GoLDSLPackage.DSL__SHAPES);
    }
    return shapes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoLDSLPackage.DSL__BOARD:
        return basicSetBoard(null, msgs);
      case GoLDSLPackage.DSL__RULES:
        return ((InternalEList<?>)getRules()).basicRemove(otherEnd, msgs);
      case GoLDSLPackage.DSL__SHAPES:
        return ((InternalEList<?>)getShapes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoLDSLPackage.DSL__BOARD:
        return getBoard();
      case GoLDSLPackage.DSL__RULES:
        return getRules();
      case GoLDSLPackage.DSL__SHAPES:
        return getShapes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoLDSLPackage.DSL__BOARD:
        setBoard((Board)newValue);
        return;
      case GoLDSLPackage.DSL__RULES:
        getRules().clear();
        getRules().addAll((Collection<? extends Rule>)newValue);
        return;
      case GoLDSLPackage.DSL__SHAPES:
        getShapes().clear();
        getShapes().addAll((Collection<? extends ShapeDef>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoLDSLPackage.DSL__BOARD:
        setBoard((Board)null);
        return;
      case GoLDSLPackage.DSL__RULES:
        getRules().clear();
        return;
      case GoLDSLPackage.DSL__SHAPES:
        getShapes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoLDSLPackage.DSL__BOARD:
        return board != null;
      case GoLDSLPackage.DSL__RULES:
        return rules != null && !rules.isEmpty();
      case GoLDSLPackage.DSL__SHAPES:
        return shapes != null && !shapes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DSLImpl
