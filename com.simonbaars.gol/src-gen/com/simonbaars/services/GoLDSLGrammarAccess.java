/*
 * generated by Xtext 2.19.0
 */
package com.simonbaars.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoLDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.DSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBoardAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBoardBoardParserRuleCall_0_0 = (RuleCall)cBoardAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRulesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_1_0_0 = (RuleCall)cRulesAssignment_1_0.eContents().get(0);
		private final Assignment cShapesAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cShapesShapeDefParserRuleCall_1_1_0 = (RuleCall)cShapesAssignment_1_1.eContents().get(0);
		
		//DSL:
		//	board=Board (rules+=Rule | shapes+=ShapeDef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//board=Board (rules+=Rule | shapes+=ShapeDef)*
		public Group getGroup() { return cGroup; }
		
		//board=Board
		public Assignment getBoardAssignment_0() { return cBoardAssignment_0; }
		
		//Board
		public RuleCall getBoardBoardParserRuleCall_0_0() { return cBoardBoardParserRuleCall_0_0; }
		
		//(rules+=Rule | shapes+=ShapeDef)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_1_0() { return cRulesAssignment_1_0; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0_0() { return cRulesRuleParserRuleCall_1_0_0; }
		
		//shapes+=ShapeDef
		public Assignment getShapesAssignment_1_1() { return cShapesAssignment_1_1; }
		
		//ShapeDef
		public RuleCall getShapesShapeDefParserRuleCall_1_1_0() { return cShapesShapeDefParserRuleCall_1_1_0; }
	}
	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Board");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cObjectsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Board:
		//	'Board:' Objects;
		@Override public ParserRule getRule() { return rule; }
		
		//'Board:' Objects
		public Group getGroup() { return cGroup; }
		
		//'Board:'
		public Keyword getBoardKeyword_0() { return cBoardKeyword_0; }
		
		//Objects
		public RuleCall getObjectsParserRuleCall_1() { return cObjectsParserRuleCall_1; }
	}
	public class ObjectsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Objects");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cShapesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cShapesShapeRefParserRuleCall_0_0 = (RuleCall)cShapesAssignment_0.eContents().get(0);
		private final Assignment cCellAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCellCellDefParserRuleCall_1_0 = (RuleCall)cCellAssignment_1.eContents().get(0);
		private final Assignment cCellsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCellsCellsParserRuleCall_2_0 = (RuleCall)cCellsAssignment_2.eContents().get(0);
		private final Assignment cGridsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGridsGridParserRuleCall_3_0 = (RuleCall)cGridsAssignment_3.eContents().get(0);
		
		//Objects:
		//	(shapes+=ShapeRef | cell+=CellDef | cells+=Cells | grids+=Grid)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(shapes+=ShapeRef | cell+=CellDef | cells+=Cells | grids+=Grid)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//shapes+=ShapeRef
		public Assignment getShapesAssignment_0() { return cShapesAssignment_0; }
		
		//ShapeRef
		public RuleCall getShapesShapeRefParserRuleCall_0_0() { return cShapesShapeRefParserRuleCall_0_0; }
		
		//cell+=CellDef
		public Assignment getCellAssignment_1() { return cCellAssignment_1; }
		
		//CellDef
		public RuleCall getCellCellDefParserRuleCall_1_0() { return cCellCellDefParserRuleCall_1_0; }
		
		//cells+=Cells
		public Assignment getCellsAssignment_2() { return cCellsAssignment_2; }
		
		//Cells
		public RuleCall getCellsCellsParserRuleCall_2_0() { return cCellsCellsParserRuleCall_2_0; }
		
		//grids+=Grid
		public Assignment getGridsAssignment_3() { return cGridsAssignment_3; }
		
		//Grid
		public RuleCall getGridsGridParserRuleCall_3_0() { return cGridsGridParserRuleCall_3_0; }
	}
	public class ShapeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.ShapeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShapeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOffsetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOffsetOffsetParserRuleCall_3_0 = (RuleCall)cOffsetAssignment_3.eContents().get(0);
		private final Assignment cObjectsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjectsObjectsParserRuleCall_4_0 = (RuleCall)cObjectsAssignment_4.eContents().get(0);
		
		//ShapeDef:
		//	'Shape' name=ID ':' offset=Offset? objects=Objects;
		@Override public ParserRule getRule() { return rule; }
		
		//'Shape' name=ID ':' offset=Offset? objects=Objects
		public Group getGroup() { return cGroup; }
		
		//'Shape'
		public Keyword getShapeKeyword_0() { return cShapeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//offset=Offset?
		public Assignment getOffsetAssignment_3() { return cOffsetAssignment_3; }
		
		//Offset
		public RuleCall getOffsetOffsetParserRuleCall_3_0() { return cOffsetOffsetParserRuleCall_3_0; }
		
		//objects=Objects
		public Assignment getObjectsAssignment_4() { return cObjectsAssignment_4; }
		
		//Objects
		public RuleCall getObjectsObjectsParserRuleCall_4_0() { return cObjectsObjectsParserRuleCall_4_0; }
	}
	public class CellPairsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.CellPairs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCellsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCellsCellParserRuleCall_1_0 = (RuleCall)cCellsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CellPairs:
		//	('(' cells+=Cell ')')+;
		@Override public ParserRule getRule() { return rule; }
		
		//('(' cells+=Cell ')')+
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//cells+=Cell
		public Assignment getCellsAssignment_1() { return cCellsAssignment_1; }
		
		//Cell
		public RuleCall getCellsCellParserRuleCall_1_0() { return cCellsCellParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class CellsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Cells");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCellPairsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Cells:
		//	'Cells:' CellPairs;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cells:' CellPairs
		public Group getGroup() { return cGroup; }
		
		//'Cells:'
		public Keyword getCellsKeyword_0() { return cCellsKeyword_0; }
		
		//CellPairs
		public RuleCall getCellPairsParserRuleCall_1() { return cCellPairsParserRuleCall_1; }
	}
	public class CellDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.CellDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCellParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CellDef:
		//	'Cell:' Cell;
		@Override public ParserRule getRule() { return rule; }
		
		//'Cell:' Cell
		public Group getGroup() { return cGroup; }
		
		//'Cell:'
		public Keyword getCellKeyword_0() { return cCellKeyword_0; }
		
		//Cell
		public RuleCall getCellParserRuleCall_1() { return cCellParserRuleCall_1; }
	}
	public class ShapeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.ShapeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShapeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXINTTerminalRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYINTTerminalRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		
		//ShapeRef:
		//	'Shape' name=ID ':' x=INT ',' y=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Shape' name=ID ':' x=INT ',' y=INT
		public Group getGroup() { return cGroup; }
		
		//'Shape'
		public Keyword getShapeKeyword_0() { return cShapeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//x=INT
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_3_0() { return cXINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//y=INT
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_5_0() { return cYINTTerminalRuleCall_5_0; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXINTTerminalRuleCall_0_0 = (RuleCall)cXAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYINTTerminalRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		
		//Cell:
		//	x=INT ',' y=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//x=INT ',' y=INT
		public Group getGroup() { return cGroup; }
		
		//x=INT
		public Assignment getXAssignment_0() { return cXAssignment_0; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_0_0() { return cXINTTerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//y=INT
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_2_0() { return cYINTTerminalRuleCall_2_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionActionParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//Rule:
		//	'Rule:' condition=Condition action=Action;
		@Override public ParserRule getRule() { return rule; }
		
		//'Rule:' condition=Condition action=Action
		public Group getGroup() { return cGroup; }
		
		//'Rule:'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//action=Action
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_2_0() { return cActionActionParserRuleCall_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cObjectsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Action:
		//	'Create' Objects;
		@Override public ParserRule getRule() { return rule; }
		
		//'Create' Objects
		public Group getGroup() { return cGroup; }
		
		//'Create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//Objects
		public RuleCall getObjectsParserRuleCall_1() { return cObjectsParserRuleCall_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cConditionRulesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Condition:
		//	'If' ConditionRules;
		@Override public ParserRule getRule() { return rule; }
		
		//'If' ConditionRules
		public Group getGroup() { return cGroup; }
		
		//'If'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//ConditionRules
		public RuleCall getConditionRulesParserRuleCall_1() { return cConditionRulesParserRuleCall_1; }
	}
	public class ConditionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.ConditionRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumberINTTerminalRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cRangeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRangeRangeParserRuleCall_1_0 = (RuleCall)cRangeAssignment_1.eContents().get(0);
		private final Assignment cLivesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLivesLivesParserRuleCall_2_0 = (RuleCall)cLivesAssignment_2.eContents().get(0);
		
		//ConditionRule:
		//	number=INT | range=Range | lives=Lives;
		@Override public ParserRule getRule() { return rule; }
		
		//number=INT | range=Range | lives=Lives
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//number=INT
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_0() { return cNumberINTTerminalRuleCall_0_0; }
		
		//range=Range
		public Assignment getRangeAssignment_1() { return cRangeAssignment_1; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_1_0() { return cRangeRangeParserRuleCall_1_0; }
		
		//lives=Lives
		public Assignment getLivesAssignment_2() { return cLivesAssignment_2; }
		
		//Lives
		public RuleCall getLivesLivesParserRuleCall_2_0() { return cLivesLivesParserRuleCall_2_0; }
	}
	public class ConditionRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.ConditionRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRule1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRule1ConditionRuleParserRuleCall_0_0 = (RuleCall)cRule1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorBoolOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRules2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRules2ConditionRulesParserRuleCall_1_1_0 = (RuleCall)cRules2Assignment_1_1.eContents().get(0);
		
		//ConditionRules:
		//	rule1=ConditionRule (operator=BoolOperator rules2=ConditionRules)?;
		@Override public ParserRule getRule() { return rule; }
		
		//rule1=ConditionRule (operator=BoolOperator rules2=ConditionRules)?
		public Group getGroup() { return cGroup; }
		
		//rule1=ConditionRule
		public Assignment getRule1Assignment_0() { return cRule1Assignment_0; }
		
		//ConditionRule
		public RuleCall getRule1ConditionRuleParserRuleCall_0_0() { return cRule1ConditionRuleParserRuleCall_0_0; }
		
		//(operator=BoolOperator rules2=ConditionRules)?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=BoolOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//BoolOperator
		public RuleCall getOperatorBoolOperatorEnumRuleCall_1_0_0() { return cOperatorBoolOperatorEnumRuleCall_1_0_0; }
		
		//rules2=ConditionRules
		public Assignment getRules2Assignment_1_1() { return cRules2Assignment_1_1; }
		
		//ConditionRules
		public RuleCall getRules2ConditionRulesParserRuleCall_1_1_0() { return cRules2ConditionRulesParserRuleCall_1_1_0; }
	}
	public class LivesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Lives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLivesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCellPairsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Lives:
		//	'Lives' CellPairs;
		@Override public ParserRule getRule() { return rule; }
		
		//'Lives' CellPairs
		public Group getGroup() { return cGroup; }
		
		//'Lives'
		public Keyword getLivesKeyword_0() { return cLivesKeyword_0; }
		
		//CellPairs
		public RuleCall getCellPairsParserRuleCall_1() { return cCellPairsParserRuleCall_1; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Range");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoundedRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnboundedRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Range:
		//	BoundedRange | UnboundedRange;
		@Override public ParserRule getRule() { return rule; }
		
		//BoundedRange | UnboundedRange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BoundedRange
		public RuleCall getBoundedRangeParserRuleCall_0() { return cBoundedRangeParserRuleCall_0; }
		
		//UnboundedRange
		public RuleCall getUnboundedRangeParserRuleCall_1() { return cUnboundedRangeParserRuleCall_1; }
	}
	public class BoundedRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.BoundedRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerBoundINTTerminalRuleCall_0_0 = (RuleCall)cLowerBoundAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHigherBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHigherBoundINTTerminalRuleCall_2_0 = (RuleCall)cHigherBoundAssignment_2.eContents().get(0);
		
		//BoundedRange:
		//	lowerBound=INT '..' higherBound=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//lowerBound=INT '..' higherBound=INT
		public Group getGroup() { return cGroup; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_0_0() { return cLowerBoundINTTerminalRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//higherBound=INT
		public Assignment getHigherBoundAssignment_2() { return cHigherBoundAssignment_2; }
		
		//INT
		public RuleCall getHigherBoundINTTerminalRuleCall_2_0() { return cHigherBoundINTTerminalRuleCall_2_0; }
	}
	public class UnboundedRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.UnboundedRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeftUnboundedRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightUnboundedRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnboundedRange:
		//	LeftUnboundedRange | RightUnboundedRange;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftUnboundedRange | RightUnboundedRange
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeftUnboundedRange
		public RuleCall getLeftUnboundedRangeParserRuleCall_0() { return cLeftUnboundedRangeParserRuleCall_0; }
		
		//RightUnboundedRange
		public RuleCall getRightUnboundedRangeParserRuleCall_1() { return cRightUnboundedRangeParserRuleCall_1; }
	}
	public class LeftUnboundedRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.LeftUnboundedRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerBoundINTTerminalRuleCall_0_0 = (RuleCall)cLowerBoundAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LeftUnboundedRange:
		//	lowerBound=INT '..';
		@Override public ParserRule getRule() { return rule; }
		
		//lowerBound=INT '..'
		public Group getGroup() { return cGroup; }
		
		//lowerBound=INT
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }
		
		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_0_0() { return cLowerBoundINTTerminalRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
	}
	public class RightUnboundedRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.RightUnboundedRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHigherBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHigherBoundINTTerminalRuleCall_1_0 = (RuleCall)cHigherBoundAssignment_1.eContents().get(0);
		
		//RightUnboundedRange:
		//	'..' higherBound=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'..' higherBound=INT
		public Group getGroup() { return cGroup; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_0() { return cFullStopFullStopKeyword_0; }
		
		//higherBound=INT
		public Assignment getHigherBoundAssignment_1() { return cHigherBoundAssignment_1; }
		
		//INT
		public RuleCall getHigherBoundINTTerminalRuleCall_1_0() { return cHigherBoundINTTerminalRuleCall_1_0; }
	}
	public class GridElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Grid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSizeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSizeSizeParserRuleCall_1_0 = (RuleCall)cSizeAssignment_1.eContents().get(0);
		private final Assignment cPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartsGridPartEnumRuleCall_2_0 = (RuleCall)cPartsAssignment_2.eContents().get(0);
		
		//Grid:
		//	'Grid:' size=Size parts+=GridPart+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Grid:' size=Size parts+=GridPart+
		public Group getGroup() { return cGroup; }
		
		//'Grid:'
		public Keyword getGridKeyword_0() { return cGridKeyword_0; }
		
		//size=Size
		public Assignment getSizeAssignment_1() { return cSizeAssignment_1; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_1_0() { return cSizeSizeParserRuleCall_1_0; }
		
		//parts+=GridPart+
		public Assignment getPartsAssignment_2() { return cPartsAssignment_2; }
		
		//GridPart
		public RuleCall getPartsGridPartEnumRuleCall_2_0() { return cPartsGridPartEnumRuleCall_2_0; }
	}
	public class OffsetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Offset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOffsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYINTTerminalRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		
		//Offset:
		//	'offset' x=INT y=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'offset' x=INT y=INT
		public Group getGroup() { return cGroup; }
		
		//'offset'
		public Keyword getOffsetKeyword_0() { return cOffsetKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//y=INT
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_2_0() { return cYINTTerminalRuleCall_2_0; }
	}
	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthINTTerminalRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		private final Assignment cHeightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHeightINTTerminalRuleCall_2_0 = (RuleCall)cHeightAssignment_2.eContents().get(0);
		
		//Size:
		//	'size' width=INT height=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'size' width=INT height=INT
		public Group getGroup() { return cGroup; }
		
		//'size'
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }
		
		//width=INT
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_1_0() { return cWidthINTTerminalRuleCall_1_0; }
		
		//height=INT
		public Assignment getHeightAssignment_2() { return cHeightAssignment_2; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_2_0() { return cHeightINTTerminalRuleCall_2_0; }
	}
	
	public class BoolOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.BoolOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BoolOperator:
		//	AND='&' | OR='|';
		public EnumRule getRule() { return rule; }
		
		//AND='&' | OR='|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'&'
		public Keyword getANDAmpersandKeyword_0_0() { return cANDAmpersandKeyword_0_0; }
		
		//OR='|'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getORVerticalLineKeyword_1_0() { return cORVerticalLineKeyword_1_0; }
	}
	public class GridPartElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.simonbaars.GoLDSL.GridPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALIVEPlusSignKeyword_0_0 = (Keyword)cALIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEADEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEADHyphenMinusKeyword_1_0 = (Keyword)cDEADEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GridPart:
		//	ALIVE='+' | DEAD='-';
		public EnumRule getRule() { return rule; }
		
		//ALIVE='+' | DEAD='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALIVE='+'
		public EnumLiteralDeclaration getALIVEEnumLiteralDeclaration_0() { return cALIVEEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getALIVEPlusSignKeyword_0_0() { return cALIVEPlusSignKeyword_0_0; }
		
		//DEAD='-'
		public EnumLiteralDeclaration getDEADEnumLiteralDeclaration_1() { return cDEADEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getDEADHyphenMinusKeyword_1_0() { return cDEADHyphenMinusKeyword_1_0; }
	}
	
	private final DSLElements pDSL;
	private final BoardElements pBoard;
	private final ObjectsElements pObjects;
	private final ShapeDefElements pShapeDef;
	private final CellPairsElements pCellPairs;
	private final CellsElements pCells;
	private final CellDefElements pCellDef;
	private final ShapeRefElements pShapeRef;
	private final CellElements pCell;
	private final RuleElements pRule;
	private final ActionElements pAction;
	private final ConditionElements pCondition;
	private final ConditionRuleElements pConditionRule;
	private final ConditionRulesElements pConditionRules;
	private final BoolOperatorElements eBoolOperator;
	private final LivesElements pLives;
	private final RangeElements pRange;
	private final BoundedRangeElements pBoundedRange;
	private final UnboundedRangeElements pUnboundedRange;
	private final LeftUnboundedRangeElements pLeftUnboundedRange;
	private final RightUnboundedRangeElements pRightUnboundedRange;
	private final GridElements pGrid;
	private final GridPartElements eGridPart;
	private final OffsetElements pOffset;
	private final SizeElements pSize;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoLDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDSL = new DSLElements();
		this.pBoard = new BoardElements();
		this.pObjects = new ObjectsElements();
		this.pShapeDef = new ShapeDefElements();
		this.pCellPairs = new CellPairsElements();
		this.pCells = new CellsElements();
		this.pCellDef = new CellDefElements();
		this.pShapeRef = new ShapeRefElements();
		this.pCell = new CellElements();
		this.pRule = new RuleElements();
		this.pAction = new ActionElements();
		this.pCondition = new ConditionElements();
		this.pConditionRule = new ConditionRuleElements();
		this.pConditionRules = new ConditionRulesElements();
		this.eBoolOperator = new BoolOperatorElements();
		this.pLives = new LivesElements();
		this.pRange = new RangeElements();
		this.pBoundedRange = new BoundedRangeElements();
		this.pUnboundedRange = new UnboundedRangeElements();
		this.pLeftUnboundedRange = new LeftUnboundedRangeElements();
		this.pRightUnboundedRange = new RightUnboundedRangeElements();
		this.pGrid = new GridElements();
		this.eGridPart = new GridPartElements();
		this.pOffset = new OffsetElements();
		this.pSize = new SizeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.simonbaars.GoLDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DSL:
	//	board=Board (rules+=Rule | shapes+=ShapeDef)*;
	public DSLElements getDSLAccess() {
		return pDSL;
	}
	
	public ParserRule getDSLRule() {
		return getDSLAccess().getRule();
	}
	
	//Board:
	//	'Board:' Objects;
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}
	
	//Objects:
	//	(shapes+=ShapeRef | cell+=CellDef | cells+=Cells | grids+=Grid)+;
	public ObjectsElements getObjectsAccess() {
		return pObjects;
	}
	
	public ParserRule getObjectsRule() {
		return getObjectsAccess().getRule();
	}
	
	//ShapeDef:
	//	'Shape' name=ID ':' offset=Offset? objects=Objects;
	public ShapeDefElements getShapeDefAccess() {
		return pShapeDef;
	}
	
	public ParserRule getShapeDefRule() {
		return getShapeDefAccess().getRule();
	}
	
	//CellPairs:
	//	('(' cells+=Cell ')')+;
	public CellPairsElements getCellPairsAccess() {
		return pCellPairs;
	}
	
	public ParserRule getCellPairsRule() {
		return getCellPairsAccess().getRule();
	}
	
	//Cells:
	//	'Cells:' CellPairs;
	public CellsElements getCellsAccess() {
		return pCells;
	}
	
	public ParserRule getCellsRule() {
		return getCellsAccess().getRule();
	}
	
	//CellDef:
	//	'Cell:' Cell;
	public CellDefElements getCellDefAccess() {
		return pCellDef;
	}
	
	public ParserRule getCellDefRule() {
		return getCellDefAccess().getRule();
	}
	
	//ShapeRef:
	//	'Shape' name=ID ':' x=INT ',' y=INT;
	public ShapeRefElements getShapeRefAccess() {
		return pShapeRef;
	}
	
	public ParserRule getShapeRefRule() {
		return getShapeRefAccess().getRule();
	}
	
	//Cell:
	//	x=INT ',' y=INT;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//Rule:
	//	'Rule:' condition=Condition action=Action;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Action:
	//	'Create' Objects;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Condition:
	//	'If' ConditionRules;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ConditionRule:
	//	number=INT | range=Range | lives=Lives;
	public ConditionRuleElements getConditionRuleAccess() {
		return pConditionRule;
	}
	
	public ParserRule getConditionRuleRule() {
		return getConditionRuleAccess().getRule();
	}
	
	//ConditionRules:
	//	rule1=ConditionRule (operator=BoolOperator rules2=ConditionRules)?;
	public ConditionRulesElements getConditionRulesAccess() {
		return pConditionRules;
	}
	
	public ParserRule getConditionRulesRule() {
		return getConditionRulesAccess().getRule();
	}
	
	//enum BoolOperator:
	//	AND='&' | OR='|';
	public BoolOperatorElements getBoolOperatorAccess() {
		return eBoolOperator;
	}
	
	public EnumRule getBoolOperatorRule() {
		return getBoolOperatorAccess().getRule();
	}
	
	//Lives:
	//	'Lives' CellPairs;
	public LivesElements getLivesAccess() {
		return pLives;
	}
	
	public ParserRule getLivesRule() {
		return getLivesAccess().getRule();
	}
	
	//Range:
	//	BoundedRange | UnboundedRange;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//BoundedRange:
	//	lowerBound=INT '..' higherBound=INT;
	public BoundedRangeElements getBoundedRangeAccess() {
		return pBoundedRange;
	}
	
	public ParserRule getBoundedRangeRule() {
		return getBoundedRangeAccess().getRule();
	}
	
	//UnboundedRange:
	//	LeftUnboundedRange | RightUnboundedRange;
	public UnboundedRangeElements getUnboundedRangeAccess() {
		return pUnboundedRange;
	}
	
	public ParserRule getUnboundedRangeRule() {
		return getUnboundedRangeAccess().getRule();
	}
	
	//LeftUnboundedRange:
	//	lowerBound=INT '..';
	public LeftUnboundedRangeElements getLeftUnboundedRangeAccess() {
		return pLeftUnboundedRange;
	}
	
	public ParserRule getLeftUnboundedRangeRule() {
		return getLeftUnboundedRangeAccess().getRule();
	}
	
	//RightUnboundedRange:
	//	'..' higherBound=INT;
	public RightUnboundedRangeElements getRightUnboundedRangeAccess() {
		return pRightUnboundedRange;
	}
	
	public ParserRule getRightUnboundedRangeRule() {
		return getRightUnboundedRangeAccess().getRule();
	}
	
	//Grid:
	//	'Grid:' size=Size parts+=GridPart+;
	public GridElements getGridAccess() {
		return pGrid;
	}
	
	public ParserRule getGridRule() {
		return getGridAccess().getRule();
	}
	
	//enum GridPart:
	//	ALIVE='+' | DEAD='-';
	public GridPartElements getGridPartAccess() {
		return eGridPart;
	}
	
	public EnumRule getGridPartRule() {
		return getGridPartAccess().getRule();
	}
	
	//Offset:
	//	'offset' x=INT y=INT;
	public OffsetElements getOffsetAccess() {
		return pOffset;
	}
	
	public ParserRule getOffsetRule() {
		return getOffsetAccess().getRule();
	}
	
	//Size:
	//	'size' width=INT height=INT;
	public SizeElements getSizeAccess() {
		return pSize;
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
