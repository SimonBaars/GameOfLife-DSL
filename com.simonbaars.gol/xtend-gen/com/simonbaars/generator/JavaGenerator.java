package com.simonbaars.generator;

import com.simonbaars.goLDSL.DSL;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class JavaGenerator {
  public static CharSequence toJava(final DSL dsl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package GameOfLife;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.Point;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class RulesOfLife {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void computeSurvivors(boolean[][] gameBoard, ArrayList<Point> survivingCells) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Iterate through the array, follow game of life rules");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i=1; i<gameBoard.length-1; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int j=1; j<gameBoard[0].length-1; j++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int surrounding = 0;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (gameBoard[i-1][j-1]) { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (gameBoard[i-1][j])   { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (gameBoard[i-1][j+1]) { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (gameBoard[i][j-1])   { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (gameBoard[i][j+1])   { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (gameBoard[i+1][j-1]) { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (gameBoard[i+1][j])   { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (gameBoard[i+1][j+1]) { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("/* only code for surving cells, so no rule if result is dead cell */");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("/* rule B3 ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if ((!gameBoard[i][j]) && (surrounding == 3)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("survivingCells.add(new Point(i-1,j-1));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("/* rule B6 ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if ((!gameBoard[i][j]) && (surrounding == 6)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("survivingCells.add(new Point(i-1,j-1));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("/* rule S2 ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if ((gameBoard[i][j]) && (surrounding == 2)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("survivingCells.add(new Point(i-1,j-1));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} */");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (gameBoard[i][j]) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// Cell is alive, Can the cell live? (2-3)");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if ((surrounding == 2) || (surrounding == 3)) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("survivingCells.add(new Point(i-1,j-1));");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// Cell is dead, will the cell be given birth? (3)");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (surrounding == 3) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("survivingCells.add(new Point(i-1,j-1));");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
